stages:
  - pre-build
  - build
  - post-build
  - test

unit-test:
  image: ${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}/node:18.12.1-buster
  stage: pre-build
  before_script:
    - npm install
  script:
    - npm run test:test
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  # artifacts:
  #   paths:
  #     - coverage/
  #   when: always
  #   reports:
  #     junit:
  #       - junit.xml
  # only:
  #   - tags

# code-quality:
#   stage: pre-build
#   image: ${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}/docker:19.03.12
#   services:
#     - name: ${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}/docker:19.03.12-dind
#       alias: docker
#       command: ["--registry-mirror", "https://mirror.gcr.io"]
#   variables:
#     DOCKER_DRIVER: overlay2
#     DOCKER_TLS_CERTDIR: ""
#     CODE_QUALITY_IMAGE: "registry.gitlab.com/gitlab-org/ci-cd/codequality:0.85.29"
#     REPORT_FORMAT: html
#   script:
#     - export SOURCE_CODE=$PWD
#     - |
#       if ! docker info &>/dev/null; then
#         if [ -z "$DOCKER_HOST" ] && [ -n "$KUBERNETES_PORT" ]; then
#           export DOCKER_HOST='tcp://localhost:2375'
#         fi
#       fi
#     - | # this is required to avoid undesirable reset of Docker image ENV variables being set on build stage
#       function propagate_env_vars() {
#         CURRENT_ENV=$(printenv)

#         for VAR_NAME; do
#           echo $CURRENT_ENV | grep "${VAR_NAME}=" > /dev/null && echo "--env $VAR_NAME "
#         done
#       }
#     - docker pull --quiet "$CODE_QUALITY_IMAGE"
#     - |
#       docker run --rm \
#         $(propagate_env_vars \
#           SOURCE_CODE \
#           TIMEOUT_SECONDS \
#           CODECLIMATE_DEBUG \
#           CODECLIMATE_DEV \
#           REPORT_STDOUT \
#           REPORT_FORMAT \
#           ENGINE_MEMORY_LIMIT_BYTES \
#           CODECLIMATE_PREFIX \
#         ) \
#         --volume "$PWD":/code \
#         --volume /var/run/docker.sock:/var/run/docker.sock \
#         "$CODE_QUALITY_IMAGE" /code
#   artifacts:
#     paths:
#       - gl-code-quality-report.html

# sca:
#   stage: pre-build
#   image: ${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}/node:18.12.0-buster
#   script:
#     - npm install -g snyk snyk-to-html
#     - snyk auth ${SNYK_TOKEN}
#     - snyk monitor --project-name=${CI_PROJECT_NAME}
#     - snyk test --json | tee snyk_sca_results.json && true
#     - snyk-to-html -i snyk_sca_results.json -o snyk_sca_results.html
#   artifacts:
#     paths:
#       - snyk_sca_results.html

build:
  stage: build
  image: ${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}/docker:20.10.17
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: ${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX}/docker:20.10.17-dind
      alias: docker
      command: ["--tls=false"]
  script:
    - echo -n ${CI_DEPENDENCY_PROXY_PASSWORD} | docker login -u ${CI_DEPENDENCY_PROXY_USER} --password-stdin ${CI_DEPENDENCY_PROXY_SERVER}
    - docker build --no-cache --build-arg dproxy_url=${CI_DEPENDENCY_PROXY_DIRECT_GROUP_IMAGE_PREFIX} -t registry.gitlab.corp.paymaya.com/core/growth/messaging-platform/communications-mesh-team/hedwig-console-fe:${CI_COMMIT_REF_NAME} .
    - echo -n ${CI_REGISTRY_PASSWORD} | docker login -u ${CI_REGISTRY_USER} --password-stdin registry.gitlab.corp.paymaya.com
    - docker push registry.gitlab.corp.paymaya.com/core/growth/messaging-platform/communications-mesh-team/hedwig-console-fe:${CI_COMMIT_REF_NAME}
  only:
    - tags

